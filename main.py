from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard
from Source.Instruments import SendButtonDose
from Source.Reader import Reader
from Source.Thread import Reminder
from Source.AdminPanel import Panel
from Source.Moderator import Moderator

from dublib.Methods.Filesystem import ReadJSON, WriteJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from dublib.TelebotUtils.Cache import TeleCache
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
import logging
import random
import os

Settings = ReadJSON("Settings.json")

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')

logging.getLogger("pyTelegramBotAPI").setLevel(logging.WARNING)
logging.getLogger("requests").setLevel(logging.WARNING)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
MakeRootDirectories(["Data/Moderation"])

if os.path.exists("Data/Moderation/Moderation.json"): pass
else: 
    DefaultJson = {}
    WriteJSON("Data/Moderation/Moderation.json", DefaultJson)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Bot = telebot.TeleBot(Settings["token"])
Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()
reader = Reader(Settings)
scheduler = BackgroundScheduler()
reminder = Reminder(Bot, Manager, Settings, reader, scheduler)
AdminPanel = Panel()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞.
Cacher = TeleCache()
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
Cacher.set_options(Settings["token"], Settings["chat_id"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
try:
	File = Cacher.get_cached_file(Settings["qr_id"], type = types.InputMediaPhoto)
	# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
	FileID = Cacher[Settings["qr_id"]]
except Exception:
	pass

#==========================================================================================#
# >>>>> –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô –í APSHEDULER <<<<< #
#==========================================================================================#

job = scheduler.add_job(func=reminder.StartDailyDose, trigger='cron', hour = Settings["start_dailydose"].split(":")[0], minute = Settings["start_dailydose"].split(":")[1], id = 'job_1')
scheduler.start()

AdminPanel.decorators.commands(Bot, Manager, Settings["password"])

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
    User = Manager.auth(Message.from_user)
    User.set_property("Active", True)
    User.set_expected_type(None)
    Bot.send_message(
        Message.chat.id, 
        "–ù—É –ø—Ä–∏–≤–µ—Ç! ‚úåÔ∏è\n\n–ê —è –∑–Ω–∞–ª, —á—Ç–æ —Ç–µ–±—è —Ç–æ–∂–µ –∫–æ –º–Ω–µ –∑–∞–Ω–µ—Å—ë—Ç. –ß—Ç–æ –∂, –¥–∞–≤–∞–π –ø–æ–¥–Ω–∏–º–µ–º —Ç–µ–±–µ —Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–∫—É!)"
        )
    try:
        call = User.get_property("Name")
        Bot.send_message(
            Message.chat.id, 
            f"–û–æ–æ, {call}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—Ü–µ–º!",
            reply_markup= ReplyKeyboardBox.AddMenu(User)
            )
        
    except KeyError:
        Bot.send_message(
        Message.chat.id, 
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        User.set_expected_type("Name")
    
AdminPanel.decorators.reply_keyboards(Bot, Manager)

@Bot.message_handler(content_types = ["text"], regexp = "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
    User = Manager.auth(Message.from_user)

    Bot.send_photo(
        Message.chat.id, 
        photo = FileID,
        caption="@Ddoza\\_bot\n@Ddoza\\_bot\n@Ddoza\\_bot\n\n*–ë–ü–° \\| –ë–æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏\\!*\n–£–ª—ã–±–Ω–∏—Å—å, –º–æ–π –º–∏–ª—ã–π –¥—Ä—É–≥, —É\\-–ª—ã–±\\-–Ω–∏—Å—å\\! üòä", 
        reply_markup=InlineKeyboardsBox.AddShare(), 
        parse_mode= "MarkdownV2"
        )

@Bot.message_handler(content_types = ["text"], regexp = "üíâ –î–û–ó–ê")
def ProcessDose(Message: types.Message):
    dose = None
    User = Manager.auth(Message.from_user)
    if User.get_property("Gender") =="Women":
        dose = reader.GetWD
    if User.get_property("Gender") =="Men":
        dose = reader.GetMD
    
    random_sentence = random.randint(1, len(dose))

    for Index in range(len(dose)):
        if Index == random_sentence-1:
            Bot.send_message(
                Message.chat.id,
                text = dose[Index]
                )

@Bot.message_handler(content_types = ["text"], regexp = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def ProcessChangeName(Message: types.Message):
    User = Manager.auth(Message.from_user)
    Bot.send_message(
        Message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup= InlineKeyboardsBox.SettingsMenu())
    
@Bot.message_handler(content_types = ["text"], regexp = "üíü –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ")
def ProcessWrite(Message: types.Message):
    User = Manager.auth(Message.from_user)
    Bot.send_message(
        Message.chat.id, 
        "–í—ã–±–µ—Ä–∏, –¥–ª—è –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ:", reply_markup= InlineKeyboardsBox.WriteFor())

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
    User = Manager.auth(Message.from_user)
    if AdminPanel.procedures.text(Bot, User, Message): return

    if User.expected_type == "Name":
        User.set_property("Name", Message.text)
        User.set_expected_type(None)
        CallName = User.get_property("Name")
        
        try: 
            if User.get_property("Change"):
                Bot.send_message(
                Message.chat.id,
                f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {CallName}!")
                Bot.send_message(
                Message.chat.id,
                "–ê –ø–æ–ª-—Ç–æ —è –Ω–∞–¥–µ—é—Å—å —Ç—ã –Ω–µ —Å–º–µ–Ω–∏–ª? ü§≠\n–ê —Ç–æ —è —É–∂–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å.",
                reply_markup= InlineKeyboardsBox.RepeatGender()
                )
        except:
            Bot.send_message(
                Message.chat.id,
                f"–£–∂–µ –Ω–µ–ø–ª–æ—Ö–æ, {CallName}! üòé\n–î–æ—Å—Ç–æ–π–Ω–æ–µ –∏–º—è!")
            Bot.send_message(
                Message.chat.id,
                "–ê —Ç—ã –∫—Ç–æ –≤–æ–æ–±—â–µ?", reply_markup= InlineKeyboardsBox.SelectionGender()
                )
    
    if User.expected_type == "Letter":

        if len(Message.text) > 200 and User.get_property("WriteTo") == "Dosa":
            Bot.send_message(
            Message.chat.id,
            "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
        elif len(Message.text) > 80 and User.get_property("WriteTo") == "Random":
            Bot.send_message(
            Message.chat.id,
            "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )	
        else:
            User.set_temp_property("Moderation", Message.text)
            User.set_expected_type(None)
            Bot.send_message(
                Message.chat.id,
                f"–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –ª–∏ –≤ –Ω–æ—Ä–º–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏\\!\n\n*–¢–≤–æ–π —Ç–µ–∫—Å—Ç:*\n{Message.text}",
                reply_markup= InlineKeyboardsBox.CheckLetter(),
                parse_mode= "MarkdownV2"
                )

AdminPanel.decorators.inline_keyboards(Bot, Manager)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Return"))
def ProcessWithoutReminders(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    Bot.delete_message(Call.message.chat.id, Call.message.id)
    
    Bot.answer_callback_query(Call.id)	

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Men"))
def ProcessMen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    User.set_property("Gender", "Men")
    Bot.send_message(
        Call.message.chat.id, 
        "–Ø —Ç–∞–∫ –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—É—Ç —Å–∞–º–µ—Ü!)",
        reply_markup=ReplyKeyboardBox.AddMenu(User)
        )
    
    SendButtonDose(User, Bot, Call, InlineKeyboardsBox)
    User.clear_temp_properties()

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Women"))
def ProcessWomen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    User.set_property("Gender","Women")
    Bot.send_message(
        Call.message.chat.id, 
        "–£—Ñ—Ñ, –∞ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –ø–∞—Ö–Ω–µ—Ç —Å–∞–º–æ—á–∫–æ–π)", 
        reply_markup=ReplyKeyboardBox.AddMenu(User)
        )

    SendButtonDose(User, Bot, Call, InlineKeyboardsBox)
    User.clear_temp_properties()

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("GirlFriend"))
def ProcessWomen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)

    Bot.send_message(
            Call.message.chat.id, 
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–ª—è —á–µ–≥–æ:", 
            reply_markup=InlineKeyboardsBox.WriteTo()
    )
    User.set_temp_property("WriteFor", "Women")

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("BoyFriend"))
def ProcessMen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)

    Bot.send_message(
            Call.message.chat.id, 
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–ª—è —á–µ–≥–æ:", 
            reply_markup=InlineKeyboardsBox.WriteTo()
    )
    User.set_temp_property("WriteFor", "Men")

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Random"))
def ProcessMen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    Bot.send_message(
            Call.message.chat.id, 
            f"–°—É–ø–µ—Ä! –ö—Ç–æ-—Ç–æ —Å–∫–æ—Ä–æ –æ–±—Ä–∞–¥—É–µ—Ç—Å—è —Ç–≤–æ–º—É –ø–æ—Å–ª–∞–Ω–∏—é!)\n–£ —Ç–µ–±—è –ª–∏–º–∏—Ç –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤ üëá"
    )
    User.set_temp_property("WriteTo", "Random")
    User.set_expected_type("Letter")

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Dosa"))
def ProcessMen(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    Bot.send_message(
            Call.message.chat.id, 
            f"–û—Ç–ª–∏—á–Ω–æ! –ö–æ–º—É-—Ç–æ —Å–∫–æ—Ä–æ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!)\n–£ —Ç–µ–±—è –ª–∏–º–∏—Ç –Ω–∞ 80 —Å–∏–º–≤–æ–ª–æ–≤ üëá"
    )
    User.set_temp_property("WriteTo", "Dosa")
    User.set_expected_type("Letter")

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Edit"))
def ProcessEdit(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    try:
        if User.get_property("Moderation"):
            Bot.send_message(
                    Call.message.chat.id, 
                    "–û—Ç–ø—Ä–∞–≤—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"
                    )
            User.set_expected_type("Letter")
    except: Bot.send_message(
            Call.message.chat.id, 
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Send"))
def ProcessSend(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)

    try: 
        Moderator().SaveUserSentences(User.get_property("Moderation"), User.get_property("WriteFor"), User.get_property("WriteTo"))
        Bot.send_message(
                Call.message.chat.id, 
                "–°–ø–∞—Å–∏–±–æ, —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç!) –°–∫–æ—Ä–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç, –∏ —Ç–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —É–≤–∏–¥–∏—Ç –±–æ–ª—å—à–æ–π –º–∏—Ä üòò. –ü–∏—à–∏ –µ—â—ë!"
                )
    except: Bot.send_message(
            Call.message.chat.id, 
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
    User.clear_temp_properties()

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Dose"))
def ProcessDose(Call: types.CallbackQuery):
    dose = None
    User = Manager.auth(Call.from_user)
    if User.get_property("Gender") =="Women":
        dose = reader.GetWD
    if User.get_property("Gender") =="Men":
        dose = reader.GetMD
    
    random_sentence = random.randint(1, len(dose))

    for Index in range(len(dose)):
        if Index == random_sentence-1:
            Bot.send_message(
                Call.message.chat.id,
                text = dose[Index]
                )
            
    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change"))
def ProcessChangeName(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    User.set_expected_type("Name")
    Bot.send_message(
            Call.message.chat.id, 
            "–ù—É –∏ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
    User.set_temp_property("Change", True)

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Info"))
def ProcessInfo(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)

    Bot.send_message(
        Call.message.chat.id,
        text = "@Ddoza\\_bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Å—É–≥—É–±–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ò∫Ô∏è\\!\n\n–í—ã –±—É–¥–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ *—Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è*, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É \"üíâ–î–æ–∑–∞\" –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∑–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤–∞\\!\n\n–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ *—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ* –ø–æ—Å–ª–∞–Ω–∏–µ\\! ‚úâÔ∏è –í–µ–¥—å –æ–Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º, –Ω–æ –∏ –≤–∞–º —Å–∞–º–∏–º üòâ\\!\n\n_*–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å, –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏\\!*_",
        parse_mode= "MarkdownV2"
    )

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Settings_daily"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    
    Bot.send_message(
            Call.message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º:",
            reply_markup=InlineKeyboardsBox.SettingsDaily())
    
    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Deactivate"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    
    Bot.send_message(
            Call.message.chat.id, 
            "–≠—Ö —Ç—ã.. –ê —è –¥—É–º–∞–ª –º—ã –¥—Ä—É–∑—å—è! ü•∫",
            reply_markup=InlineKeyboardsBox.Sorry())
    
    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Activate"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    
    Bot.send_message(
            Call.message.chat.id, 
            "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –≤–∑—è–ª—Å—è –∑–∞ –≥–æ–ª–æ–≤—É! üòâ",
            reply_markup=InlineKeyboardsBox.Good())
    
    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Sorry"))
def ProcessSorry(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    Bot.send_message(
            Call.message.chat.id, 
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
    Bot.delete_message(Call.message.chat.id, Call.message.id)
    User.set_property("Active", False)
    

    Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Good"))
def ProcessGood(Call: types.CallbackQuery):
    User = Manager.auth(Call.from_user)
    Bot.send_message(
            Call.message.chat.id, 
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    Bot.delete_message(Call.message.chat.id, Call.message.id)
    User.set_property("Active", True)
    
    Bot.answer_callback_query(Call.id)

@Bot.message_handler(content_types = ["audio", "document", "video"])
def File(Message: types.Message):
    User = Manager.auth(Message.from_user)
    AdminPanel.procedures.files(Bot, User, Message)

AdminPanel.decorators.photo(Bot, Manager)

Bot.infinity_polling()

