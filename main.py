from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard
from Source.Instruments import SendButtonDose
from Source.Reader import Reader
from Source.Thread import Reminder
from Source.AdminPanel import Panel
from Source.Moderator import Moderator

from dublib.Methods.JSON import ReadJSON, WriteJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
import logging
import random
import os

Settings = ReadJSON("Settings.json")

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
	format='%(asctime)s - %(levelname)s - %(message)s',
	datefmt='%Y-%m-%d %H:%M:%S')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
MakeRootDirectories(["Data/Moderation"])

if os.path.exists("Data/Moderation/Moderation.json"): pass
else: 
	DefaultJson = {}
	WriteJSON("Data/Moderation/Moderation.json", DefaultJson)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Bot = telebot.TeleBot(Settings["token"])
Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()
reader = Reader(Settings)
scheduler = BackgroundScheduler()
reminder = Reminder(Bot, Manager, Settings, reader, scheduler)
AdminPanel = Panel()

#==========================================================================================#
# >>>>> –ù–ê–°–¢–†–û–ô–ö–ò APSHEDULER <<<<< #
#==========================================================================================#

StartDailyDose = Settings["start_dailydose"]

#==========================================================================================#
# >>>>> –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô –í APSHEDULER <<<<< #
#==========================================================================================#

job = scheduler.add_job(func=reminder.StartDailyDose, trigger='cron', hour = StartDailyDose["hour"], minute=StartDailyDose["minute"], id = 'job_1')
scheduler.start()

AdminPanel.decorators.commands(Bot, Manager, Settings["password"])

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)
	User.set_property("Active", True)
	User.set_expected_type(None)
	Bot.send_message(
		Message.chat.id, 
		"–ù—É –ø—Ä–∏–≤–µ—Ç! ‚úåÔ∏è\n\n–ê —è –∑–Ω–∞–ª, —á—Ç–æ —Ç–µ–±—è —Ç–æ–∂–µ –∫–æ –º–Ω–µ –∑–∞–Ω–µ—Å—ë—Ç.\n–î–∞–≤–∞–π-–∫–∞ –ø–æ–¥–Ω–∏–º–µ–º —Ç–µ–±–µ —Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–∫—É!"
		)
	try:
		call = User.get_property("Name")
		Bot.send_message(
			Message.chat.id, 
			f"{call}, –º—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! ü§ó",
			reply_markup= ReplyKeyboardBox.AddMenu(User)
			)
		
	except KeyError:
		Bot.send_message(
		Message.chat.id, 
		"–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
		)
		User.set_expected_type("Name")
	
AdminPanel.decorators.reply_keyboards(Bot, Manager)

@Bot.message_handler(content_types = ["text"], regexp = "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_photo(
		Message.chat.id, 
		photo = Settings["qr_id"],
		caption='@Ddoza_bot\n@Ddoza_bot\n@Ddoza_bot\n\n–ë–æ—Ç –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏! üòé', 
		reply_markup=InlineKeyboardsBox.AddShare()
		)

@Bot.message_handler(content_types = ["text"], regexp = "üíâ –î–û–ó–ê")
def ProcessDose(Message: types.Message):
	dose = None
	User = Manager.auth(Message.from_user)
	if User.get_property("Gender") =="Women":
		dose = reader.GetWD
	if User.get_property("Gender") =="Men":
		dose = reader.GetMD
	
	random_sentence = random.randint(1, len(dose))

	for Index in range(len(dose)):
		if Index == random_sentence-1:
			Bot.send_message(
				Message.chat.id,
				text = dose[Index]
				)

@Bot.message_handler(content_types = ["text"], regexp = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def ProcessChangeName(Message: types.Message):
	User = Manager.auth(Message.from_user)
	Bot.send_message(
		Message.chat.id, 
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup= InlineKeyboardsBox.SettingsMenu())
	
@Bot.message_handler(content_types = ["text"], regexp = "üíü –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ")
def ProcessWrite(Message: types.Message):
	User = Manager.auth(Message.from_user)
	Bot.send_message(
		Message.chat.id, 
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ:", reply_markup= InlineKeyboardsBox.WriteFor())

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)
	if AdminPanel.procedures.text(Bot, User, Message): return

	if User.expected_type == "Name":
		User.set_property("Name", Message.text)
		User.set_expected_type(None)
		CallName = User.get_property("Name")
		
		try: 
			if User.get_property("Change"):
				Bot.send_message(
				Message.chat.id,
				f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {CallName}!")
				Bot.send_message(
				Message.chat.id,
				"–Ø –Ω–∞–¥–µ—é—Å—å –ø–æ–ª —Ç—ã –Ω–µ —Å–º–µ–Ω–∏–ª? ü§≠\n\n–ê –Ω—É-–∫–∞ —É–∫–∞–∂–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.\n–ê —Ç–æ —è —É–∂–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å!)",
				reply_markup= InlineKeyboardsBox.SelectionGender()
				)
		except:
			Bot.send_message(
				Message.chat.id,
				f"–£–∂–µ –Ω–µ–ø–ª–æ—Ö–æ, {CallName}! üòé\n–î–æ—Å—Ç–æ–π–Ω–æ–µ –∏–º—è!")
			Bot.send_message(
				Message.chat.id,
				"–ê —Ç—ã –∫—Ç–æ –≤–æ–æ–±—â–µ?", reply_markup= InlineKeyboardsBox.SelectionGender()
				)
	
	if User.expected_type == "Letter":
		text = Message.text

		if len(Message.text) > 200:
			Bot.send_message(
			Message.chat.id,
			"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
			)
		else:
			User.set_temp_property("Moderation", Message.text)
			User.set_expected_type(None)
			Bot.send_message(
				Message.chat.id,
				f"–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –ª–∏ –≤ –Ω–æ—Ä–º–µ?\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\"\n\n{Message.text}",
				reply_markup= InlineKeyboardsBox.CheckLetter()
				)

AdminPanel.decorators.inline_keyboards(Bot, Manager)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Return"))
def ProcessWithoutReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	
	Bot.answer_callback_query(Call.id)	

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Men"))
def ProcessMen(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_property("Gender", "Men")
	Bot.send_message(
		Call.message.chat.id, 
		"–Ø —Ç–∞–∫ –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—É—Ç —Å–∞–º–µ—Ü!)",
		reply_markup=ReplyKeyboardBox.AddMenu(User)
		)
	try:
		if User.get_property("Change"):
			User.clear_temp_properties()
	except:
		SendButtonDose(User, Bot, Call, InlineKeyboardsBox)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Women"))
def ProcessWomen(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_property("Gender","Women")
	Bot.send_message(
		Call.message.chat.id, 
		"–£—Ñ—Ñ, –∞ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –ø–∞—Ö–Ω–µ—Ç —Å–∞–º–æ—á–∫–æ–π)", 
		reply_markup=ReplyKeyboardBox.AddMenu(User)
		)
	try:
		if User.get_property("Change"):
			User.clear_temp_properties()
	except:
		SendButtonDose(User, Bot, Call, InlineKeyboardsBox)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("GirlFriend"))
def ProcessWomen(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
			Call.message.chat.id, 
			"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä\\! –ö–æ–º—É\\-—Ç–æ –∏–∑ –¥–∞–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *\"–î–û–ó–ê\"* –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–µ—Ç\\! –ê –º–æ–∂–µ—Ç –∏ —Ç–µ–±–µ\\)\n–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—É—Å—Ç–∏—Ç—å –≤ —à–∏—Ä–æ–∫–∏–µ –º–∞—Å—Å—ã üòÑ\n–£ —Ç–µ–±—è –ª–∏–º–∏—Ç –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤\\.", 
			reply_markup=ReplyKeyboardBox.AddMenu(User),
			parse_mode= "MarkdownV2"
	)
	User.set_temp_property("WriteFor", "Women")
	User.set_expected_type("Letter")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("BoyFriend"))
def ProcessMen(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
			Call.message.chat.id, 
			"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä\\! –ö–æ–º—É\\-—Ç–æ –∏–∑ –∫–∞–≤–∞–ª–µ—Ä–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *\"–î–û–ó–ê\"* –∫—Ä—É–ø–Ω–æ –ø–æ–≤–µ–∑–µ—Ç\\! –ê –º–æ–∂–µ—Ç –∏ —Ç–µ–±–µ\\)\n–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—É—Å—Ç–∏—Ç—å –≤ —à–∏—Ä–æ–∫–∏–µ –º–∞—Å—Å—ã üòÑ\n–£ —Ç–µ–±—è –ª–∏–º–∏—Ç –Ω–∞ 200 —Å–∏–º–≤–æ–ª–æ–≤\\.", 
			reply_markup=ReplyKeyboardBox.AddMenu(User),
			parse_mode= "MarkdownV2"
			)
	User.set_temp_property("WriteFor", "Men")
	User.set_expected_type("Letter")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Edit"))
def ProcessEdit(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	try:
		if User.get_property("Moderation"):
			Bot.send_message(
					Call.message.chat.id, 
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
					)
			User.set_expected_type("Letter")
	except: Bot.send_message(
			Call.message.chat.id, 
			"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
			)
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Send"))
def ProcessSend(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	try: 
		Moderator().SaveUserSentences(User.get_property("Moderation"), User.get_property("WriteFor"))
		Bot.send_message(
				Call.message.chat.id, 
				"–°—É–ø–µ—Ä! –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç!\n–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 –¥–æ 2 –Ω–µ–¥–µ–ª—å.\n–°–∫–æ—Ä–æ —Ç–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ —É–≤–∏–¥–∏—Ç –±–æ–ª—å—à–æ–π –º–∏—Ä! üòâ"
				)
	except: Bot.send_message(
			Call.message.chat.id, 
			"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
			)
	User.clear_temp_properties()

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Dose"))
def ProcessDose(Call: types.CallbackQuery):
	dose = None
	User = Manager.auth(Call.from_user)
	if User.get_property("Gender") =="Women":
		dose = reader.GetWD
	if User.get_property("Gender") =="Men":
		dose = reader.GetMD
	
	random_sentence = random.randint(1, len(dose))

	for Index in range(len(dose)):
		if Index == random_sentence-1:
			Bot.send_message(
				Call.message.chat.id,
				text = dose[Index]
				)
			
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change"))
def ProcessChangeName(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_expected_type("Name")
	Bot.send_message(
			Call.message.chat.id, 
			"–ù—É –∏ –∫–∞–∫ –º–Ω–µ —Ç–µ–ø–µ—Ä—å —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
	User.set_temp_property("Change", True)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Info"))
def ProcessInfo(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
		Call.message.chat.id,
		text = "@Ddoza\\_bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏\\!\n\n–ë–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è, –∏–º–∏—Ç–∏—Ä—É—è –æ–±—â–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –ª—É—á—à–µ–≥–æ –¥—Ä—É–≥–∞, –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–∫—Ä–µ–Ω–Ω–µ –≤–∞–º–∏ –¥–æ—Ä–æ–∂–∏—Ç\\! üòä\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ\"\\. –û–Ω–æ —Å–ø–æ—Å–æ–±–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ —Å–æ–≥—Ä–µ—Ç—å –¥—É—à—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\\. –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤–≤–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É\\! üí™\n\n_*–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å, –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏\\!*_",
		parse_mode= "MarkdownV2"
	)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Settings_daily"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	Bot.send_message(
			Call.message.chat.id, 
			"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:",
			reply_markup=InlineKeyboardsBox.SettingsDaily())
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Deactivate"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	Bot.send_message(
			Call.message.chat.id, 
			"–≠—Ö —Ç—ã.. –ê —è –¥—É–º–∞–ª –º—ã –¥—Ä—É–∑—å—è! ü•∫\n–ù—É –ª–∞–¥–Ω–æ. –í–∫–ª—é—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!",
			reply_markup=InlineKeyboardsBox.Sorry())
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Activate"))
def ProcessSettingsDaily(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	Bot.send_message(
			Call.message.chat.id, 
			"–Ø —Ä–∞–¥, —á—Ç–æ –º—ã —Å–Ω–æ–≤–∞ –≤–º–µ—Å—Ç–µ! ‚ù§Ô∏è üòâ\n–ó–∞–¥–∞–¥–∏–º —Ç–µ–ø–µ—Ä—å –∂–∞—Ä—É!!!",
			reply_markup=InlineKeyboardsBox.Good())
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Sorry"))
def ProcessSorry(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	User.set_property("Active", False)
	Bot.send_message(
			Call.message.chat.id, 
			"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–æ–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Good"))
def ProcessGood(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	User.set_property("Active", True)
	Bot.send_message(
			Call.message.chat.id, 
			"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–æ–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞!")

	Bot.answer_callback_query(Call.id)

@Bot.message_handler(content_types = ["audio", "document", "video"])
def File(Message: types.Message):
	User = Manager.auth(Message.from_user)
	AdminPanel.procedures.files(Bot, User, Message)

AdminPanel.decorators.photo(Bot, Manager)

Bot.infinity_polling()

