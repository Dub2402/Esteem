from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard
from Source.Instruments import SendButtonDose
from Source.Reader import Reader
from Source.Thread import Reminder

from dublib.Methods.JSON import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

import telebot
import logging
import random

Settings = ReadJSON("Settings.json")

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Bot = telebot.TeleBot(Settings["token"])
Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()
reader = Reader(Settings)
scheduler = BackgroundScheduler()
reminder = Reminder(Bot, Manager, Settings, reader)

#==========================================================================================#
# >>>>> –ù–ê–°–¢–†–û–ô–ö–ò APSHEDULER <<<<< #
#==========================================================================================#

StartRandom = Settings["start_random"]
StartDailyDose = Settings["start_dailydose"]

#==========================================================================================#
# >>>>> –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô –í APSHEDULER <<<<< #
#==========================================================================================#

scheduler.add_job(reminder.StartRandomaizer, 'cron', hour = StartRandom["hour"], minute=StartRandom["minute"])
scheduler.add_job(reminder.StartDailyDose, 'cron', hour = StartDailyDose["hour"], minute=StartDailyDose["minute"])
scheduler.start()

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)
	User.set_expected_type(None)
	Bot.send_message(
		Message.chat.id, 
		"–ù—É, –ø—Ä–∏–≤–µ—Ç!) ‚úåÔ∏è\n\n–ê —è –∑–Ω–∞–ª, —á—Ç–æ —Ç–µ–±—è —Ç–æ–∂–µ –∫–æ –º–Ω–µ –∑–∞–Ω–µ—Å—ë—Ç! –ß—Ç–æ? –°—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —ç—Ç–æ –∑–∞ —à—Ç—É–∫–æ–≤–∏–Ω–∞. –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –ü–æ–¥–Ω–∏–º–µ–º —Ç–µ–±–µ —Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–∫—É! üòâüòÑ"
		)
	Bot.send_message(
		Message.chat.id, 
		"–ö–∞–∫ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å —Ç–µ–±—è –∑–æ–≤—É—Ç?"
		)
	User.set_expected_type("Name")

@Bot.message_handler(content_types = ["text"], regexp = "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)
	pass

@Bot.message_handler(content_types = ["text"], regexp = "üíâ –î–û–ó–ê")
def ProcessDose(Message: types.Message):
	dose = None
	User = Manager.auth(Message.from_user)
	if User.get_property("Gender") =="W":
		dose = reader.GetWD
	if User.get_property("Gender") =="M":
		dose = reader.GetMD
	
	random_sentence = random.randint(1, len(dose))

	for Index in range(len(dose)):
		if Index == random_sentence-1:
			Bot.send_message(
				Message.chat.id,
				text = dose[Index]
				)

@Bot.message_handler(content_types = ["text"], regexp = "üîÅ –°–º–µ–Ω–∏—Ç—å –∏–º—è")
def ProcessChangeName(Message: types.Message):
	User = Manager.auth(Message.from_user)
	pass

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if User.expected_type == "Name":
		User.set_property("Name", Message.text)
		User.set_expected_type(None)
		Bot.send_message(
			Message.chat.id,
			"–ù–æ—Ä–º–∞–ª—å–Ω–æ-–Ω–æ—Ä–º–∞–ª—å–Ω–æ! üòé")
		Bot.send_message(
			Message.chat.id,
			"–ê —Ç—ã –≤–æ–æ–±—â–µ –∫—Ç–æ?", reply_markup= InlineKeyboardsBox.SelectionGender()
			)
			
@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Men"))
def ProcessTextNewReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_property("Gender","M")
	
	Bot.send_message(
			Call.message.chat.id, 
			"–ê —è —Ç–∞–∫ –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —ç—Ç–æ —Å–∞–º–µ—Ü!)",
			reply_markup=ReplyKeyboardBox.AddMenu(User))
	SendButtonDose(User, Bot, Call, InlineKeyboardsBox)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Women"))
def ProcessTextNewReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_property("Gender","W")

	Bot.send_message(
			Call.message.chat.id, 
			"–£—Ñ—Ñ, –∞ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –ø–∞—Ö–Ω–µ—Ç —Å–∞–º–æ—á–∫–æ–π)", 
			reply_markup=ReplyKeyboardBox.AddMenu(User))
	SendButtonDose(User, Bot, Call, InlineKeyboardsBox)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Dose"))
def ProcessTextNewReminder(Call: types.CallbackQuery):
	dose = None
	User = Manager.auth(Call.from_user)
	if User.get_property("Gender") =="W":
		dose = reader.GetWD
	if User.get_property("Gender") =="M":
		dose = reader.GetMD
	
	random_sentence = random.randint(1, len(dose))

	for Index in range(len(dose)):
		if Index == random_sentence-1:
			Bot.send_message(
				Call.message.chat.id,
				text = dose[Index]
				)
			
	Bot.answer_callback_query(Call.id)

Bot.infinity_polling()